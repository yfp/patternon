// Generated by CoffeeScript 1.10.0
(function() {
  var Patternon, makeRegexp;

  makeRegexp = function(str, wildcard) {
    var escaped;
    if (wildcard == null) {
      wildcard = true;
    }
    escaped = wildcard ? str.replace(/[\-\[\]\/\{\}\(\)\+\.\\\^\$\|]/g, "\\$&").replace(/\*/g, '[a-z-A-Z0-9_-]*').replace(/\?/g, '[a-z-A-Z0-9_-]') : str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    return RegExp("^" + escaped + "$");
  };

  Patternon = (function() {
    function Patternon(array, options) {
      var i, item, len;
      this.options = {
        wildcard: (options != null ? options.wildcard : void 0) || true
      };
      this.rules = [];
      for (i = 0, len = array.length; i < len; i++) {
        item = array[i];
        this.addRule.apply(this, item);
      }
    }

    Patternon.prototype.addRule = function(rule, value) {
      var newrule;
      newrule = (function() {
        switch (false) {
          case !(rule instanceof RegExp):
            return rule;
          case typeof rule !== 'string':
            return makeRegexp(rule, this.options.wildcard);
          default:
            throw "Unknown pattern type";
        }
      }).call(this);
      return this.rules.push([newrule, value]);
    };

    Patternon.prototype.first = function(str) {
      var i, item, len, ref;
      ref = this.rules;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (str.match(item[0])) {
          return item[1];
        }
      }
      return null;
    };

    Patternon.prototype.find = function(str) {
      return this.rules.filter(function(arg) {
        var rule, value;
        rule = arg[0], value = arg[1];
        return str.match(rule);
      }).map(function(arg) {
        var rule, value;
        rule = arg[0], value = arg[1];
        return value;
      });
    };

    return Patternon;

  })();

  module.exports = function(array, options) {
    return new Patternon(array, options);
  };

}).call(this);
